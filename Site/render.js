const { ipcRenderer } = require('electron');
const nodemailer = require('nodemailer');
const emailInfo = require('./email.json');
const config = require('./config.json');
const { text } = require('express');

// Email
const transporter = nodemailer.createTransport({
    host: "smtp.yandex.ru",
    port: 465,
    secure: true,
    auth: {
        user: emailInfo.login,
        pass: emailInfo.pass
    }
});

console.log(emailInfo.login, emailInfo.pass)

// pages
startPage = document.getElementById("startPage");
scanPage = document.getElementById("scanPage");
namePage = document.getElementById("namePage");
badPage = document.getElementById("badPage");
sendedPage = document.getElementById("sendedPage");
resultPage = document.getElementById("resultPage");

// name page elements
nameText = document.getElementById("nameText");

// result elements
resultTitle = document.getElementById("resultTitle");
resultDescription = document.getElementById("resultDescription");
speedometrVideo = document.getElementById("speedometrVideo");
speedometrSrc = document.getElementById("speedometrSrc");
resultVideo = document.getElementById("resultVideo");
video = document.getElementById("video");
videoSrc = document.getElementById("videoSrc");
smallSendButton = document.getElementById("smallSendButton");
smallRepeatlButton = document.getElementById("smallRepeatlButton");
smallCancelButtonY = document.getElementById("smallCancelButtonY");

// Levels

titles = {
    "1": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!<br>–í—ã ‚Äî –±—É–¥–¥–∏—Å—Ç, –ø–æ–∑–Ω–∞–≤—à–∏–π –¥–∑–µ–Ω",
    "2": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!<br>–í—ã ‚Äî –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ª–Ω",
    "3": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!<br>–í—ã ‚Äî –∫–æ—Ä–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∂—É–Ω–≥–ª–µ–π"
}

descriptions = {
    "1": "–ü—Ä–æ –≤–∞—Å –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å: ¬´–†–µ–¥–∫–æ, –Ω–æ –º–µ—Ç–∫–æ¬ª.<br>–í —ç—Ç–æ–º –≥–æ–¥—É –≤—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ PR-–≤–∞–π–±.<br>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ",
    "2": "–í —ç—Ç–æ–º –≥–æ–¥—É –≤—ã –Ω–∞ –≤–æ–ª–Ω–µ. –î–∞–∂–µ —Å–∞–º—ã–µ<br>–≤—ã—Å–æ–∫–∏–µ –∏–∑ –Ω–∏—Ö –±—ã–ª–∏ –≤–∞–º –ø–æ –ø–ª–µ—á—É",
    "3": "–í—ã –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Ä–æ–ª—å ‚Äî –ª—é–±–∏—Ç–µ —Å–ª–∞–≤—É.<br>–ü–æ–ø–∞–ª–∏ –≤ —Ç–æ–ø–æ–≤—ã–µ –°–ú–ò, –∞ –≥–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è<br>–≤ –º–∏—Ä–µ –ò–ë –Ω–µ –æ–±–æ—à–ª–∏—Å—å –±–µ–∑ –≤–∞—Å"
}

// Variables

var scanned = true;
var updated = true;
var level = "1";
var personName = "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω";
var email = "email@email.com";
var personVideo = personName.replaceAll(' ', '_');
var videoLink = "link";
var videoEnded = true;
var scanTimer;

const emailText = `<p>–î–æ—Ä–æ–≥–æ–π —Å–ø–∏–∫–µ—Ä!
                    <br><br>
                    –ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –¥–ª—è —Å–ø–∏–∫–µ—Ä–æ–≤ —Ç—ã –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –°–ú–ò–º–∏–º–µ—Ç—Ä–∞.
                    <br><br>
                    –°–∫–∞—á–∞—Ç—å —Ä–æ–ª–∏–∫ –æ —Ç–æ–º, –∫—Ç–æ —Ç—ã –ø–æ —à–∫–∞–ª–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–≤–æ–µ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö –º–∞—Å—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–°–ú–ò) –∏ –≤ —ç—Ñ–∏—Ä–∞—Ö –æ—Ç—Ä–∞—Å–ª–µ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ 2022 –≥–æ–¥—É, –º–æ–∂–Ω–æ –ø–æ 
                    <a href="LINK">–°–°–´–õ–ö–ï</a>.
                    <br><br>
                    –î–∞, –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ –Ω–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å—Å—ã–ª–∫–∞–º, –Ω–æ —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –ø–æ —ç—Ç–æ–π –º–æ–∂–Ω–æ üòä
                    <br><br>
                    –¢–≤–æ—è –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –ø—Ä–µ—Å—Å-—Å–ª—É–∂–±–∞.
                 </p>`


ipcRenderer.on('update-person', (event, arg) => {
    personName = arg.name;
    personVideo = personName.replaceAll(' ', '_');
    level = arg.level;
    email = arg.email;
    videoLink = config[personName]

    console.log(personName);
    console.log(personVideo);
    console.log(level);
    console.log(email);
    console.log(videoLink);

    if (updated == false) {
        // if has scanned faces
        // if (scanned) {
            clearTimeout(scanTimer);

            nameText.innerHTML = personName;
            speedometrSrc.src = `../Assets/Animations/${level}.webm`;
            speedometrVideo.load();

            videoSrc.src = `../Assets/Videos/${personVideo}.mp4`;
            video.load();

            namePage.style.display = "block";
            scanPage.style.display = "none";

            // ipcRenderer.send('set-camera', {"value": false});
        // }
        // else {
        //     badPage.style.display = "block";
        //     scanPage.style.display = "none";
        //     // Show another page
        // }
    }
    updated = true;
});

speedometrVideo.addEventListener('ended', (event) => {
    ShowResult();
    console.log('Video ended');
});

video.addEventListener('ended', (event) => {
    videoEnded = true;
});

function ShowResult() {
    resultTitle.style.display = "block";
    resultDescription.style.display = "block";
    resultVideo.style.display = "block";
    smallSendButton.style.display = "block";
    smallRepeatlButton.style.display = "block";
    smallCancelButtonY.style.display = "block";

    videoEnded = false;
    video.play();
}

function HideResult() {
    resultTitle.style.display = "none";
    resultDescription.style.display = "none";
    resultVideo.style.display = "none";
    smallSendButton.style.display = "none";
    smallRepeatlButton.style.display = "none";
    smallCancelButtonY.style.display = "none";
}

function StartClick() {
    scanPage.style.display = "block";
    resultPage.style.display = "none";
    namePage.style.display = "none";
    badPage.style.display = "none";
    startPage.style.display = "none";
    HideResult();
}

function RepeatClick() {
    if (videoEnded) {
        video.play();
    }
}

function GoMenuClick() {
    startPage.style.display = "block";
    scanPage.style.display = "none";
    namePage.style.display = "none";
    badPage.style.display = "none";
    resultPage.style.display = "none";
    sendedPage.style.display = "none";
    HideResult();

    updated = true;
}

function ScanClick() {
    if (updated == true) {
        updated = false;
        ipcRenderer.send('set-camera', {"value": true});
    }

    scanTimer = setTimeout(function () {
        badPage.style.display = "block";
        scanPage.style.display = "none";
        updated = true;
        ipcRenderer.send('set-camera', {"value": false});
    }, 5000);
}

function GoToResult() {
    // Add result functionality

    resultTitle.innerHTML = titles[level];
    resultDescription.innerHTML = descriptions[level];

    resultPage.style.display = "block";
    namePage.style.display = "none";

    speedometrVideo.play();
}

function SendClick() {
    var text = emailText.replaceAll('LINK', videoLink);

    var mailOptions = {
        from: emailInfo.login,
        to: email,
        subject: 'Positive Speaker',
        html: text
    };

    transporter.sendMail(mailOptions, function (error, info) {
        if (error) {
            console.log(error);
        } else {
            console.log('Email sent: ' + info.response);
        }
    });

    // Add send functionality

    sendedPage.style.display = "block";
    resultPage.style.display = "none";
    HideResult();
}